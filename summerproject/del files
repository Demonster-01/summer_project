# settings.py

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'debug.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django.channels': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}
CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',  # Replace this with your frontend domain
    'http://example.com',     # Add other allowed domains if needed
]
CORS_ALLOW_METHODS = [
    'GET',
    'POST',
    'PUT',
    'PATCH',
    'DELETE',
    'OPTIONS',
    'HEAD',
]
CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_HEADERS = [
    'Content-Type',
    'Authorization',
]





# consumers.py

import json
from channels.generic.websocket import WebsocketConsumer
from asgiref.sync import async_to_sync


class MovieSeatConsumer(WebsocketConsumer):
    def connect(self):
        # Get movie_id and screening_time from the query parameters
        movie_id = self.scope['url_route']['kwargs']['movie_id']
        screening_time = self.scope['url_route']['kwargs']['screening_time']

        # Subscribe the client to a unique channel based on movie_id and screening_time
        async_to_sync(self.channel_layer.group_add)(
            f"movie_{movie_id}_screening_{screening_time}",
            self.channel_name
        )
        self.accept()

    def disconnect(self, close_code):
        # Unsubscribe the client from the channel when the WebSocket connection is closed
        pass

    def receive(self, text_data):
        # Not needed for this use case as the server will not receive any messages from the client
        pass

    def broadcast_seat_update(self, event):
        # Send seat availability update to the client
        seat_data = event['seat_data']
        self.send(text_data=json.dumps(seat_data))
